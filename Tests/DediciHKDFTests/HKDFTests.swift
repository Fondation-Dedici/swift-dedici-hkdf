//
// Copyright (c) 2022 DediÄ‰i
// SPDX-License-Identifier: AGPL-3.0-only
//

import struct Crypto.SHA256
import XCTest
@testable import DediciHKDF

internal final class HKDFTests: XCTestCase {
    private func hkdf(material: Data, salt: Data, info: Data, outputSize: Int, mode: HKDF.Mode) throws -> Data {
        let parameters = HKDF.Parameters<SHA256>(
            from: material,
            salt: salt,
            info: info,
            outputSize: outputSize,
            mode: mode
        )
        return try HKDF.deriveSecrets(from: parameters)
    }

    func testDefault() throws {
        let expectedOutput = Data([
            0x3C, 0xB2, 0x5F, 0x25, 0xFA, 0xAC, 0xD5, 0x7A,
            0x90, 0x43, 0x4F, 0x64, 0xD0, 0x36, 0x2F, 0x2A,
            0x2D, 0x2D, 0x0A, 0x90, 0xCF, 0x1A, 0x5A, 0x4C,
            0x5D, 0xB0, 0x2D, 0x56, 0xEC, 0xC4, 0xC5, 0xBF,
            0x34, 0x00, 0x72, 0x08, 0xD5, 0xB8, 0x87, 0x18,
            0x58, 0x65,
        ])

        XCTAssertEqual(
            try hkdf(
                material: DataMocks.shortMaterial,
                salt: DataMocks.shortSalt,
                info: DataMocks.shortInfo,
                outputSize: expectedOutput.count,
                mode: .default
            ),
            expectedOutput
        )
    }

    func testDefaultLong() throws {
        let expectedOutput = Data([
            0xB1, 0x1E, 0x39, 0x8D, 0xC8, 0x03, 0x27, 0xA1,
            0xC8, 0xE7, 0xF7, 0x8C, 0x59, 0x6A, 0x49, 0x34,
            0x4F, 0x01, 0x2E, 0xDA, 0x2D, 0x4E, 0xFA, 0xD8,
            0xA0, 0x50, 0xCC, 0x4C, 0x19, 0xAF, 0xA9, 0x7C,
            0x59, 0x04, 0x5A, 0x99, 0xCA, 0xC7, 0x82, 0x72,
            0x71, 0xCB, 0x41, 0xC6, 0x5E, 0x59, 0x0E, 0x09,
            0xDA, 0x32, 0x75, 0x60, 0x0C, 0x2F, 0x09, 0xB8,
            0x36, 0x77, 0x93, 0xA9, 0xAC, 0xA3, 0xDB, 0x71,
            0xCC, 0x30, 0xC5, 0x81, 0x79, 0xEC, 0x3E, 0x87,
            0xC1, 0x4C, 0x01, 0xD5, 0xC1, 0xF3, 0x43, 0x4F,
            0x1D, 0x87,
        ])

        XCTAssertEqual(
            try hkdf(
                material: DataMocks.longMaterial,
                salt: DataMocks.longSalt,
                info: DataMocks.longInfo,
                outputSize: expectedOutput.count,
                mode: .default
            ),
            expectedOutput
        )
    }

    func testTextSecureV2() throws {
        let expectedOutput = Data([
            0x6E, 0xC2, 0x55, 0x6D, 0x5D, 0x7B, 0x1D, 0x81,
            0xDE, 0xE4, 0x22, 0x2A, 0xD7, 0x48, 0x36, 0x95,
            0xDD, 0xC9, 0x8F, 0x4F, 0x5F, 0xAB, 0xC0, 0xE0,
            0x20, 0x5D, 0xC2, 0xEF, 0x87, 0x52, 0xD4, 0x1E,
            0x04, 0xE2, 0xE2, 0x11, 0x01, 0xC6, 0x8F, 0xF0,
            0x93, 0x94, 0xB8, 0xAD, 0x0B, 0xDC, 0xB9, 0x60,
            0x9C, 0xD4, 0xEE, 0x82, 0xAC, 0x13, 0x19, 0x9B,
            0x4A, 0xA9, 0xFD, 0xA8, 0x99, 0xDA, 0xEB, 0xEC,
        ])

        XCTAssertEqual(
            try hkdf(
                material: DataMocks.shortMaterial,
                salt: DataMocks.shortSalt,
                info: DataMocks.shortInfo,
                outputSize: expectedOutput.count,
                mode: .textSecureV2
            ),
            expectedOutput
        )
    }

    func testTextSecureV2Long() throws {
        let expectedOutput = Data([
            0x91, 0x34, 0x90, 0xBA, 0x80, 0xF3, 0xAE, 0xE2,
            0x24, 0x7B, 0x32, 0x4B, 0x81, 0x78, 0x73, 0x25,
            0x20, 0x66, 0xD0, 0xB5, 0x18, 0x01, 0xBC, 0x82,
            0x89, 0x95, 0x1A, 0x13, 0x41, 0xF1, 0xE4, 0xC5,
            0x42, 0x27, 0x54, 0xA9, 0x23, 0x3E, 0x8B, 0x5B,
            0x6F, 0xEB, 0x01, 0xEC, 0x04, 0x49, 0xE7, 0x79,
            0x8E, 0x1F, 0x62, 0x03, 0xE6, 0xB1, 0x59, 0xD9,
            0xBB, 0x98, 0x32, 0xD0, 0x4D, 0xD9, 0x97, 0x42,
            0xBB, 0x0F, 0x02, 0xD2, 0xF5, 0x38, 0xE8, 0xC7,
            0x93, 0xB5, 0xB0, 0xA7, 0x67, 0x2D, 0x2C, 0xDB,
            0x4D, 0x68,
        ])

        XCTAssertEqual(
            try hkdf(
                material: DataMocks.longMaterial,
                salt: DataMocks.longSalt,
                info: DataMocks.longInfo,
                outputSize: expectedOutput.count,
                mode: .textSecureV2
            ),
            expectedOutput
        )
    }
}
